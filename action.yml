name: Set proxy
description: 
inputs:
  config:
    description: ''
    required: true
  redirect:
    description: ''
    required: false
  password:
    description: ''
    required: false
  token:
    description: 'GITHUB_TOKEN'
    required: false
runs:
  using: "composite"
  steps:
    - name: Install dependencies
      if: inputs.password != ''
      shell: bash
      run: |
        sudo apt-get install python3 python3-setuptools
        pip3 install --upgrade git+https://github.com/w311ang/pytools.git@package
        pip3 install tenacity
    - name: Auth
      if: inputs.password != ''
      env:
        config: ${{ inputs.config }}
        host: ${{ inputs.redirect }}
        password: ${{ inputs.password }}
      uses: nick-fields/retry@v2
      with:
        timeout_minutes: 10
        max_attempts: 3
        retry_wait_seconds: 60
        shell: python3
        on_retry_command: |
          import os
          os.system('''
          sudo systemctl restart shadowsocks-libev-local@client
          sleep 5s
          ''')
        command: |
          import json
          from pytools.pytools import pas
          from pytools.pytools import base64decode
          import os
          from tenacity import retry, wait_fixed, stop_after_attempt, stop_after_delay
  
          password=os.environ['password']
          host=os.environ['host']
          config=json.loads(base64decode(os.environ['config']))
  
          @retry(wait=wait_fixed(60),stop=(stop_after_delay(60) | stop_after_attempt(5)))
          def main():
            if not host:
              url=config['server']+':'+str(config['server_port'])
            else:
              url=host+':'+str(config['server_port'])
            pas(url,password)
  
          main()
    - name: Install
      shell: bash
      env:
        config: ${{ inputs.config }}
      run: |
        sudo apt-get install shadowsocks-libev simple-obfs proxychains-ng
        sudo -E sh -c 'echo $config|base64 -d > /etc/shadowsocks-libev/client.json'
        sudo systemctl start shadowsocks-libev-local@client
        sleep 5s

        sudo sed -i 's/socks4 	127.0.0.1 9050/socks5 127.0.0.1 1080/g' /etc/proxychains4.conf
        sudo sed -i 's/#quiet_mode/quiet_mode/g' /etc/proxychains4.conf

        defaultdns=`grep "nameserver" /etc/resolv.conf`
        #sudo sed -i "s/nameserver .*/nameserver 1.1.1.1/" /etc/resolv.conf
        #sudo sed -i "s/nameserver .*/$defaultdns/" /etc/resolv.conf
    - name: Test
      uses: nick-invision/retry@v2
      with:
        timeout_minutes: 10
        max_attempts: 3
        retry_wait_seconds: 60
        on_retry_command: |
          sudo systemctl restart shadowsocks-libev-local@client
          sleep 5s
        command: |
          systemctl status --no-pager shadowsocks-libev-local@client
          for i in {1..2}
          do
            proxychains curl -I -s --connect-timeout 5 http://192.168.2.1 || (\
            echo connect error; \
            sleep 3s)
          done
          systemctl status --no-pager shadowsocks-libev-local@client
          proxychains curl -I -s --connect-timeout 5 http://192.168.2.1 || (\
          echo connect error; \
          echo '::error title=Setproxy::connect error'; \
          exit 1)
          proxychains curl -I -s --connect-timeout 5 https://www.google.com || echo connect google error
    - name: HTTP Support
      shell: bash
      working-directory: /tmp
      run: |
        wget -nv $(test '${{ inputs.token }}' != '' && echo '--user=username --password="${{ inputs.token }}"') https://github.com/ginuerzh/gost/releases/download/v2.11.4/gost-linux-amd64-2.11.4.gz
        gunzip gost-linux-amd64-2.11.4.gz; chmod +x gost-linux-amd64-2.11.4; mv gost-linux-amd64-2.11.4 /usr/local/bin/gost
        sudo sh -c 'echo -n "\
        [Unit]
        Description=GO Simple Tunnel
        After=network.target
        [Service]
        ExecStart=gost -L=http://:1081 -F=socks5://127.0.0.1:1080
        Rnestart=on-abort
        [Install]
        WantedBy=multi-user.target
        ">/etc/systemd/system/gost.service'
        sudo systemctl daemon-reload
        sudo systemctl start gost
        systemctl status --no-pager gost
